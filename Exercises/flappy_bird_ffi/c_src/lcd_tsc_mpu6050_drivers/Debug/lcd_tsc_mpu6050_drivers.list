
lcd_tsc_mpu6050_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002540  08002540  00003540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002570  08002570  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002570  08002570  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002570  08002570  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002570  08002570  00003570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002574  08002574  00003574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002578  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000074  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000080  20000080  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000077a1  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015fd  00000000  00000000  0000b7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000728  00000000  00000000  0000cde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000056b  00000000  00000000  0000d508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001893  00000000  00000000  0000da73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a91e  00000000  00000000  0000f306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a939d  00000000  00000000  00019c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c2fc1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c0c  00000000  00000000  000c3004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000086  00000000  00000000  000c4c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002528 	.word	0x08002528

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002528 	.word	0x08002528

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9d6 	bl	800057c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f808 	bl	80001e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f896 	bl	8000304 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001d8:	f000 f854 	bl	8000284 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    break;
 80001dc:	bf00      	nop
 80001de:	2300      	movs	r3, #0
  }
  /* USER CODE END 3 */
}
 80001e0:	4618      	mov	r0, r3
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b09e      	sub	sp, #120	@ 0x78
 80001e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80001ee:	2228      	movs	r2, #40	@ 0x28
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f002 f990 	bl	8002518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
 8000200:	605a      	str	r2, [r3, #4]
 8000202:	609a      	str	r2, [r3, #8]
 8000204:	60da      	str	r2, [r3, #12]
 8000206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000208:	463b      	mov	r3, r7
 800020a:	223c      	movs	r2, #60	@ 0x3c
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f002 f982 	bl	8002518 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000214:	2302      	movs	r3, #2
 8000216:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000218:	2301      	movs	r3, #1
 800021a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021c:	2310      	movs	r3, #16
 800021e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000220:	2300      	movs	r3, #0
 8000222:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000224:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000228:	4618      	mov	r0, r3
 800022a:	f000 fdb7 	bl	8000d9c <HAL_RCC_OscConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000234:	f000 f8ca 	bl	80003cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000238:	230f      	movs	r3, #15
 800023a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800023c:	2300      	movs	r3, #0
 800023e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f001 fde0 	bl	8001e18 <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800025e:	f000 f8b5 	bl	80003cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000262:	2320      	movs	r3, #32
 8000264:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000266:	2300      	movs	r3, #0
 8000268:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800026a:	463b      	mov	r3, r7
 800026c:	4618      	mov	r0, r3
 800026e:	f001 ffa3 	bl	80021b8 <HAL_RCCEx_PeriphCLKConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000278:	f000 f8a8 	bl	80003cc <Error_Handler>
  }
}
 800027c:	bf00      	nop
 800027e:	3778      	adds	r7, #120	@ 0x78
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000288:	4b1b      	ldr	r3, [pc, #108]	@ (80002f8 <MX_I2C1_Init+0x74>)
 800028a:	4a1c      	ldr	r2, [pc, #112]	@ (80002fc <MX_I2C1_Init+0x78>)
 800028c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800028e:	4b1a      	ldr	r3, [pc, #104]	@ (80002f8 <MX_I2C1_Init+0x74>)
 8000290:	4a1b      	ldr	r2, [pc, #108]	@ (8000300 <MX_I2C1_Init+0x7c>)
 8000292:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000294:	4b18      	ldr	r3, [pc, #96]	@ (80002f8 <MX_I2C1_Init+0x74>)
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800029a:	4b17      	ldr	r3, [pc, #92]	@ (80002f8 <MX_I2C1_Init+0x74>)
 800029c:	2201      	movs	r2, #1
 800029e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002a0:	4b15      	ldr	r3, [pc, #84]	@ (80002f8 <MX_I2C1_Init+0x74>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002a6:	4b14      	ldr	r3, [pc, #80]	@ (80002f8 <MX_I2C1_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002ac:	4b12      	ldr	r3, [pc, #72]	@ (80002f8 <MX_I2C1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002b2:	4b11      	ldr	r3, [pc, #68]	@ (80002f8 <MX_I2C1_Init+0x74>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002b8:	4b0f      	ldr	r3, [pc, #60]	@ (80002f8 <MX_I2C1_Init+0x74>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002be:	480e      	ldr	r0, [pc, #56]	@ (80002f8 <MX_I2C1_Init+0x74>)
 80002c0:	f000 fc3a 	bl	8000b38 <HAL_I2C_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002ca:	f000 f87f 	bl	80003cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002ce:	2100      	movs	r1, #0
 80002d0:	4809      	ldr	r0, [pc, #36]	@ (80002f8 <MX_I2C1_Init+0x74>)
 80002d2:	f000 fccc 	bl	8000c6e <HAL_I2CEx_ConfigAnalogFilter>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80002dc:	f000 f876 	bl	80003cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80002e0:	2100      	movs	r1, #0
 80002e2:	4805      	ldr	r0, [pc, #20]	@ (80002f8 <MX_I2C1_Init+0x74>)
 80002e4:	f000 fd0e 	bl	8000d04 <HAL_I2CEx_ConfigDigitalFilter>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80002ee:	f000 f86d 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000028 	.word	0x20000028
 80002fc:	40005400 	.word	0x40005400
 8000300:	00201d2b 	.word	0x00201d2b

08000304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b088      	sub	sp, #32
 8000308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800030a:	f107 030c 	add.w	r3, r7, #12
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031a:	4b2a      	ldr	r3, [pc, #168]	@ (80003c4 <MX_GPIO_Init+0xc0>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	4a29      	ldr	r2, [pc, #164]	@ (80003c4 <MX_GPIO_Init+0xc0>)
 8000320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000324:	6153      	str	r3, [r2, #20]
 8000326:	4b27      	ldr	r3, [pc, #156]	@ (80003c4 <MX_GPIO_Init+0xc0>)
 8000328:	695b      	ldr	r3, [r3, #20]
 800032a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800032e:	60bb      	str	r3, [r7, #8]
 8000330:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000332:	4b24      	ldr	r3, [pc, #144]	@ (80003c4 <MX_GPIO_Init+0xc0>)
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	4a23      	ldr	r2, [pc, #140]	@ (80003c4 <MX_GPIO_Init+0xc0>)
 8000338:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800033c:	6153      	str	r3, [r2, #20]
 800033e:	4b21      	ldr	r3, [pc, #132]	@ (80003c4 <MX_GPIO_Init+0xc0>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CSX_Pin|LCD_BL_A_Pin|LCD_DATA1_Pin|LCD_DATA0_Pin
 800034a:	2200      	movs	r2, #0
 800034c:	f248 6118 	movw	r1, #34328	@ 0x8618
 8000350:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000354:	f000 fbd8 	bl	8000b08 <HAL_GPIO_WritePin>
                          |LCD_WRX_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RDX_Pin|LCD_DCX_Pin|LCD_DATA7_Pin|LCD_DATA6_Pin
 8000358:	2200      	movs	r2, #0
 800035a:	f64f 5113 	movw	r1, #64787	@ 0xfd13
 800035e:	481a      	ldr	r0, [pc, #104]	@ (80003c8 <MX_GPIO_Init+0xc4>)
 8000360:	f000 fbd2 	bl	8000b08 <HAL_GPIO_WritePin>
                          |LCD_DATA5_Pin|LCD_DATA4_Pin|LCD_DATA3_Pin|LCD_DATA2_Pin
                          |TP_RST_Pin|LCD_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_CSX_Pin LCD_BL_A_Pin LCD_DATA1_Pin LCD_DATA0_Pin
                           LCD_WRX_Pin */
  GPIO_InitStruct.Pin = LCD_CSX_Pin|LCD_BL_A_Pin|LCD_DATA1_Pin|LCD_DATA0_Pin
 8000364:	f248 6318 	movw	r3, #34328	@ 0x8618
 8000368:	60fb      	str	r3, [r7, #12]
                          |LCD_WRX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036a:	2301      	movs	r3, #1
 800036c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000372:	2303      	movs	r3, #3
 8000374:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000376:	f107 030c 	add.w	r3, r7, #12
 800037a:	4619      	mov	r1, r3
 800037c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000380:	f000 fa48 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RDX_Pin LCD_DCX_Pin LCD_DATA7_Pin LCD_DATA6_Pin
                           LCD_DATA5_Pin LCD_DATA4_Pin LCD_DATA3_Pin LCD_DATA2_Pin
                           TP_RST_Pin LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RDX_Pin|LCD_DCX_Pin|LCD_DATA7_Pin|LCD_DATA6_Pin
 8000384:	f64f 5313 	movw	r3, #64787	@ 0xfd13
 8000388:	60fb      	str	r3, [r7, #12]
                          |LCD_DATA5_Pin|LCD_DATA4_Pin|LCD_DATA3_Pin|LCD_DATA2_Pin
                          |TP_RST_Pin|LCD_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000392:	2303      	movs	r3, #3
 8000394:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000396:	f107 030c 	add.w	r3, r7, #12
 800039a:	4619      	mov	r1, r3
 800039c:	480a      	ldr	r0, [pc, #40]	@ (80003c8 <MX_GPIO_Init+0xc4>)
 800039e:	f000 fa39 	bl	8000814 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_INT_Pin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 80003a2:	2320      	movs	r3, #32
 80003a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80003aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	2300      	movs	r3, #0
 80003ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 80003b0:	f107 030c 	add.w	r3, r7, #12
 80003b4:	4619      	mov	r1, r3
 80003b6:	4804      	ldr	r0, [pc, #16]	@ (80003c8 <MX_GPIO_Init+0xc4>)
 80003b8:	f000 fa2c 	bl	8000814 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003bc:	bf00      	nop
 80003be:	3720      	adds	r7, #32
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	40021000 	.word	0x40021000
 80003c8:	48000400 	.word	0x48000400

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <Error_Handler+0x8>

080003d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003de:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <HAL_MspInit+0x44>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	4a0e      	ldr	r2, [pc, #56]	@ (800041c <HAL_MspInit+0x44>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6193      	str	r3, [r2, #24]
 80003ea:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <HAL_MspInit+0x44>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	f003 0301 	and.w	r3, r3, #1
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	4b09      	ldr	r3, [pc, #36]	@ (800041c <HAL_MspInit+0x44>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	4a08      	ldr	r2, [pc, #32]	@ (800041c <HAL_MspInit+0x44>)
 80003fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000400:	61d3      	str	r3, [r2, #28]
 8000402:	4b06      	ldr	r3, [pc, #24]	@ (800041c <HAL_MspInit+0x44>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000

08000420 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	@ 0x28
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	f107 0314 	add.w	r3, r7, #20
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
 8000436:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a17      	ldr	r2, [pc, #92]	@ (800049c <HAL_I2C_MspInit+0x7c>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d127      	bne.n	8000492 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000442:	4b17      	ldr	r3, [pc, #92]	@ (80004a0 <HAL_I2C_MspInit+0x80>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a16      	ldr	r2, [pc, #88]	@ (80004a0 <HAL_I2C_MspInit+0x80>)
 8000448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b14      	ldr	r3, [pc, #80]	@ (80004a0 <HAL_I2C_MspInit+0x80>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU6050_TSC_SCL_Pin|MPU6050_TSC_SDA_Pin;
 800045a:	23c0      	movs	r3, #192	@ 0xc0
 800045c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800045e:	2312      	movs	r3, #18
 8000460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	2300      	movs	r3, #0
 8000464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000466:	2303      	movs	r3, #3
 8000468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800046a:	2304      	movs	r3, #4
 800046c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800046e:	f107 0314 	add.w	r3, r7, #20
 8000472:	4619      	mov	r1, r3
 8000474:	480b      	ldr	r0, [pc, #44]	@ (80004a4 <HAL_I2C_MspInit+0x84>)
 8000476:	f000 f9cd 	bl	8000814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <HAL_I2C_MspInit+0x80>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a08      	ldr	r2, [pc, #32]	@ (80004a0 <HAL_I2C_MspInit+0x80>)
 8000480:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <HAL_I2C_MspInit+0x80>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800048e:	60fb      	str	r3, [r7, #12]
 8000490:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000492:	bf00      	nop
 8000494:	3728      	adds	r7, #40	@ 0x28
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40005400 	.word	0x40005400
 80004a0:	40021000 	.word	0x40021000
 80004a4:	48000400 	.word	0x48000400

080004a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <NMI_Handler+0x4>

080004b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <HardFault_Handler+0x4>

080004b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <MemManage_Handler+0x4>

080004c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <BusFault_Handler+0x4>

080004c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <UsageFault_Handler+0x4>

080004d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004fe:	f000 f883 	bl	8000608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
 //sys_tick_cb();

  /* USER CODE END SysTick_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800050c:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <SystemInit+0x20>)
 800050e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000512:	4a05      	ldr	r2, [pc, #20]	@ (8000528 <SystemInit+0x20>)
 8000514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	e000ed00 	.word	0xe000ed00

0800052c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800052c:	f8df d030 	ldr.w	sp, [pc, #48]	@ 8000560 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000530:	f7ff ffea 	bl	8000508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000534:	480b      	ldr	r0, [pc, #44]	@ (8000564 <LoopForever+0x6>)
  ldr r1, =_edata
 8000536:	490c      	ldr	r1, [pc, #48]	@ (8000568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000538:	4a0c      	ldr	r2, [pc, #48]	@ (800056c <LoopForever+0xe>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800053c:	e002      	b.n	8000544 <LoopCopyDataInit>

0800053e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800053e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000542:	3304      	adds	r3, #4

08000544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000548:	d3f9      	bcc.n	800053e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054a:	4a09      	ldr	r2, [pc, #36]	@ (8000570 <LoopForever+0x12>)
  ldr r4, =_ebss
 800054c:	4c09      	ldr	r4, [pc, #36]	@ (8000574 <LoopForever+0x16>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000550:	e001      	b.n	8000556 <LoopFillZerobss>

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000554:	3204      	adds	r2, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>

/* Call static constructors */
   // bl __libc_init_array
/* Call the application's entry point.*/
	bl	main
 800055a:	f7ff fe35 	bl	80001c8 <main>

0800055e <LoopForever>:

LoopForever:
    b LoopForever
 800055e:	e7fe      	b.n	800055e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000560:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000568:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800056c:	08002578 	.word	0x08002578
  ldr r2, =_sbss
 8000570:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000574:	20000080 	.word	0x20000080

08000578 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000578:	e7fe      	b.n	8000578 <ADC1_2_IRQHandler>
	...

0800057c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000580:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <HAL_Init+0x28>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a07      	ldr	r2, [pc, #28]	@ (80005a4 <HAL_Init+0x28>)
 8000586:	f043 0310 	orr.w	r3, r3, #16
 800058a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058c:	2003      	movs	r0, #3
 800058e:	f000 f90d 	bl	80007ac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000592:	200f      	movs	r0, #15
 8000594:	f000 f808 	bl	80005a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000598:	f7ff ff1e 	bl	80003d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40022000 	.word	0x40022000

080005a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b0:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <HAL_InitTick+0x54>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <HAL_InitTick+0x58>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005be:	fbb3 f3f1 	udiv	r3, r3, r1
 80005c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f917 	bl	80007fa <HAL_SYSTICK_Config>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e00e      	b.n	80005f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b0f      	cmp	r3, #15
 80005da:	d80a      	bhi.n	80005f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005dc:	2200      	movs	r2, #0
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	f04f 30ff 	mov.w	r0, #4294967295
 80005e4:	f000 f8ed 	bl	80007c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e8:	4a06      	ldr	r2, [pc, #24]	@ (8000604 <HAL_InitTick+0x5c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005ee:	2300      	movs	r3, #0
 80005f0:	e000      	b.n	80005f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000000 	.word	0x20000000
 8000600:	20000008 	.word	0x20000008
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <HAL_IncTick+0x20>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <HAL_IncTick+0x24>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4413      	add	r3, r2
 8000618:	4a04      	ldr	r2, [pc, #16]	@ (800062c <HAL_IncTick+0x24>)
 800061a:	6013      	str	r3, [r2, #0]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20000008 	.word	0x20000008
 800062c:	2000007c 	.word	0x2000007c

08000630 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return uwTick;  
 8000634:	4b03      	ldr	r3, [pc, #12]	@ (8000644 <HAL_GetTick+0x14>)
 8000636:	681b      	ldr	r3, [r3, #0]
}
 8000638:	4618      	mov	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	2000007c 	.word	0x2000007c

08000648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000670:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067a:	4a04      	ldr	r2, [pc, #16]	@ (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	60d3      	str	r3, [r2, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	@ (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db0a      	blt.n	80006d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	490c      	ldr	r1, [pc, #48]	@ (80006f8 <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	0112      	lsls	r2, r2, #4
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	440b      	add	r3, r1
 80006d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d4:	e00a      	b.n	80006ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4908      	ldr	r1, [pc, #32]	@ (80006fc <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	0112      	lsls	r2, r2, #4
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	440b      	add	r3, r1
 80006ea:	761a      	strb	r2, [r3, #24]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000700:	b480      	push	{r7}
 8000702:	b089      	sub	sp, #36	@ 0x24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	f1c3 0307 	rsb	r3, r3, #7
 800071a:	2b04      	cmp	r3, #4
 800071c:	bf28      	it	cs
 800071e:	2304      	movcs	r3, #4
 8000720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3304      	adds	r3, #4
 8000726:	2b06      	cmp	r3, #6
 8000728:	d902      	bls.n	8000730 <NVIC_EncodePriority+0x30>
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3b03      	subs	r3, #3
 800072e:	e000      	b.n	8000732 <NVIC_EncodePriority+0x32>
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	f04f 32ff 	mov.w	r2, #4294967295
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43da      	mvns	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	401a      	ands	r2, r3
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000748:	f04f 31ff 	mov.w	r1, #4294967295
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	43d9      	mvns	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4313      	orrs	r3, r2
         );
}
 800075a:	4618      	mov	r0, r3
 800075c:	3724      	adds	r7, #36	@ 0x24
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000778:	d301      	bcc.n	800077e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077a:	2301      	movs	r3, #1
 800077c:	e00f      	b.n	800079e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077e:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <SysTick_Config+0x40>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000786:	210f      	movs	r1, #15
 8000788:	f04f 30ff 	mov.w	r0, #4294967295
 800078c:	f7ff ff8e 	bl	80006ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000790:	4b05      	ldr	r3, [pc, #20]	@ (80007a8 <SysTick_Config+0x40>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000796:	4b04      	ldr	r3, [pc, #16]	@ (80007a8 <SysTick_Config+0x40>)
 8000798:	2207      	movs	r2, #7
 800079a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	e000e010 	.word	0xe000e010

080007ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ff47 	bl	8000648 <__NVIC_SetPriorityGrouping>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b086      	sub	sp, #24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d4:	f7ff ff5c 	bl	8000690 <__NVIC_GetPriorityGrouping>
 80007d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	68b9      	ldr	r1, [r7, #8]
 80007de:	6978      	ldr	r0, [r7, #20]
 80007e0:	f7ff ff8e 	bl	8000700 <NVIC_EncodePriority>
 80007e4:	4602      	mov	r2, r0
 80007e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f7ff ff5d 	bl	80006ac <__NVIC_SetPriority>
}
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b082      	sub	sp, #8
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ffb0 	bl	8000768 <SysTick_Config>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000814:	b480      	push	{r7}
 8000816:	b087      	sub	sp, #28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000822:	e154      	b.n	8000ace <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	2101      	movs	r1, #1
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	4013      	ands	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	2b00      	cmp	r3, #0
 8000838:	f000 8146 	beq.w	8000ac8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f003 0303 	and.w	r3, r3, #3
 8000844:	2b01      	cmp	r3, #1
 8000846:	d005      	beq.n	8000854 <HAL_GPIO_Init+0x40>
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f003 0303 	and.w	r3, r3, #3
 8000850:	2b02      	cmp	r3, #2
 8000852:	d130      	bne.n	80008b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	2203      	movs	r2, #3
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	43db      	mvns	r3, r3
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	4013      	ands	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	68da      	ldr	r2, [r3, #12]
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	4313      	orrs	r3, r2
 800087c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800088a:	2201      	movs	r2, #1
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43db      	mvns	r3, r3
 8000894:	693a      	ldr	r2, [r7, #16]
 8000896:	4013      	ands	r3, r2
 8000898:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	091b      	lsrs	r3, r3, #4
 80008a0:	f003 0201 	and.w	r2, r3, #1
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	693a      	ldr	r2, [r7, #16]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	f003 0303 	and.w	r3, r3, #3
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d017      	beq.n	80008f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	2203      	movs	r2, #3
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	4013      	ands	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	689a      	ldr	r2, [r3, #8]
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f003 0303 	and.w	r3, r3, #3
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	d123      	bne.n	8000946 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	08da      	lsrs	r2, r3, #3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	3208      	adds	r2, #8
 8000906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800090a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	220f      	movs	r2, #15
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4013      	ands	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	691a      	ldr	r2, [r3, #16]
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	f003 0307 	and.w	r3, r3, #7
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	4313      	orrs	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	08da      	lsrs	r2, r3, #3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3208      	adds	r2, #8
 8000940:	6939      	ldr	r1, [r7, #16]
 8000942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	2203      	movs	r2, #3
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	f003 0203 	and.w	r2, r3, #3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4313      	orrs	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000982:	2b00      	cmp	r3, #0
 8000984:	f000 80a0 	beq.w	8000ac8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000988:	4b58      	ldr	r3, [pc, #352]	@ (8000aec <HAL_GPIO_Init+0x2d8>)
 800098a:	699b      	ldr	r3, [r3, #24]
 800098c:	4a57      	ldr	r2, [pc, #348]	@ (8000aec <HAL_GPIO_Init+0x2d8>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	6193      	str	r3, [r2, #24]
 8000994:	4b55      	ldr	r3, [pc, #340]	@ (8000aec <HAL_GPIO_Init+0x2d8>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009a0:	4a53      	ldr	r2, [pc, #332]	@ (8000af0 <HAL_GPIO_Init+0x2dc>)
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	089b      	lsrs	r3, r3, #2
 80009a6:	3302      	adds	r3, #2
 80009a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	f003 0303 	and.w	r3, r3, #3
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	220f      	movs	r2, #15
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80009ca:	d019      	beq.n	8000a00 <HAL_GPIO_Init+0x1ec>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a49      	ldr	r2, [pc, #292]	@ (8000af4 <HAL_GPIO_Init+0x2e0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d013      	beq.n	80009fc <HAL_GPIO_Init+0x1e8>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a48      	ldr	r2, [pc, #288]	@ (8000af8 <HAL_GPIO_Init+0x2e4>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d00d      	beq.n	80009f8 <HAL_GPIO_Init+0x1e4>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a47      	ldr	r2, [pc, #284]	@ (8000afc <HAL_GPIO_Init+0x2e8>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d007      	beq.n	80009f4 <HAL_GPIO_Init+0x1e0>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a46      	ldr	r2, [pc, #280]	@ (8000b00 <HAL_GPIO_Init+0x2ec>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d101      	bne.n	80009f0 <HAL_GPIO_Init+0x1dc>
 80009ec:	2304      	movs	r3, #4
 80009ee:	e008      	b.n	8000a02 <HAL_GPIO_Init+0x1ee>
 80009f0:	2305      	movs	r3, #5
 80009f2:	e006      	b.n	8000a02 <HAL_GPIO_Init+0x1ee>
 80009f4:	2303      	movs	r3, #3
 80009f6:	e004      	b.n	8000a02 <HAL_GPIO_Init+0x1ee>
 80009f8:	2302      	movs	r3, #2
 80009fa:	e002      	b.n	8000a02 <HAL_GPIO_Init+0x1ee>
 80009fc:	2301      	movs	r3, #1
 80009fe:	e000      	b.n	8000a02 <HAL_GPIO_Init+0x1ee>
 8000a00:	2300      	movs	r3, #0
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	f002 0203 	and.w	r2, r2, #3
 8000a08:	0092      	lsls	r2, r2, #2
 8000a0a:	4093      	lsls	r3, r2
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a12:	4937      	ldr	r1, [pc, #220]	@ (8000af0 <HAL_GPIO_Init+0x2dc>)
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	089b      	lsrs	r3, r3, #2
 8000a18:	3302      	adds	r3, #2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a20:	4b38      	ldr	r3, [pc, #224]	@ (8000b04 <HAL_GPIO_Init+0x2f0>)
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a44:	4a2f      	ldr	r2, [pc, #188]	@ (8000b04 <HAL_GPIO_Init+0x2f0>)
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b04 <HAL_GPIO_Init+0x2f0>)
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a6e:	4a25      	ldr	r2, [pc, #148]	@ (8000b04 <HAL_GPIO_Init+0x2f0>)
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000a74:	4b23      	ldr	r3, [pc, #140]	@ (8000b04 <HAL_GPIO_Init+0x2f0>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a98:	4a1a      	ldr	r2, [pc, #104]	@ (8000b04 <HAL_GPIO_Init+0x2f0>)
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	@ (8000b04 <HAL_GPIO_Init+0x2f0>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d003      	beq.n	8000ac2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ac2:	4a10      	ldr	r2, [pc, #64]	@ (8000b04 <HAL_GPIO_Init+0x2f0>)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	3301      	adds	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	f47f aea3 	bne.w	8000824 <HAL_GPIO_Init+0x10>
  }
}
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	371c      	adds	r7, #28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010000 	.word	0x40010000
 8000af4:	48000400 	.word	0x48000400
 8000af8:	48000800 	.word	0x48000800
 8000afc:	48000c00 	.word	0x48000c00
 8000b00:	48001000 	.word	0x48001000
 8000b04:	40010400 	.word	0x40010400

08000b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	807b      	strh	r3, [r7, #2]
 8000b14:	4613      	mov	r3, r2
 8000b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b18:	787b      	ldrb	r3, [r7, #1]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b1e:	887a      	ldrh	r2, [r7, #2]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b24:	e002      	b.n	8000b2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b26:	887a      	ldrh	r2, [r7, #2]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e08d      	b.n	8000c66 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d106      	bne.n	8000b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f7ff fc5e 	bl	8000420 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2224      	movs	r2, #36	@ 0x24
 8000b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f022 0201 	bic.w	r2, r2, #1
 8000b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685a      	ldr	r2, [r3, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000b88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000b98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d107      	bne.n	8000bb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	e006      	b.n	8000bc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000bbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d108      	bne.n	8000bda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	e007      	b.n	8000bea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	685a      	ldr	r2, [r3, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000be8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	6812      	ldr	r2, [r2, #0]
 8000bf4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	68da      	ldr	r2, [r3, #12]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000c0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	691a      	ldr	r2, [r3, #16]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	430a      	orrs	r2, r1
 8000c26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69d9      	ldr	r1, [r3, #28]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a1a      	ldr	r2, [r3, #32]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	430a      	orrs	r2, r1
 8000c36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f042 0201 	orr.w	r2, r2, #1
 8000c46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2220      	movs	r2, #32
 8000c52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b20      	cmp	r3, #32
 8000c82:	d138      	bne.n	8000cf6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d101      	bne.n	8000c92 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e032      	b.n	8000cf8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2224      	movs	r2, #36	@ 0x24
 8000c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f022 0201 	bic.w	r2, r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000cc0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	6819      	ldr	r1, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	683a      	ldr	r2, [r7, #0]
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f042 0201 	orr.w	r2, r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2220      	movs	r2, #32
 8000ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e000      	b.n	8000cf8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000cf6:	2302      	movs	r3, #2
  }
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	2b20      	cmp	r3, #32
 8000d18:	d139      	bne.n	8000d8e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d101      	bne.n	8000d28 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000d24:	2302      	movs	r3, #2
 8000d26:	e033      	b.n	8000d90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2224      	movs	r2, #36	@ 0x24
 8000d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f022 0201 	bic.w	r2, r2, #1
 8000d46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000d56:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f042 0201 	orr.w	r2, r2, #1
 8000d78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2220      	movs	r2, #32
 8000d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e000      	b.n	8000d90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000d8e:	2302      	movs	r3, #2
  }
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000da8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000db2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d102      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f001 b823 	b.w	8001e08 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000dc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 817d 	beq.w	80010d2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dd8:	4bbc      	ldr	r3, [pc, #752]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 030c 	and.w	r3, r3, #12
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d00c      	beq.n	8000dfe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000de4:	4bb9      	ldr	r3, [pc, #740]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 030c 	and.w	r3, r3, #12
 8000dec:	2b08      	cmp	r3, #8
 8000dee:	d15c      	bne.n	8000eaa <HAL_RCC_OscConfig+0x10e>
 8000df0:	4bb6      	ldr	r3, [pc, #728]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000df8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000dfc:	d155      	bne.n	8000eaa <HAL_RCC_OscConfig+0x10e>
 8000dfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e02:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000e0a:	fa93 f3a3 	rbit	r3, r3
 8000e0e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e12:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e16:	fab3 f383 	clz	r3, r3
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	095b      	lsrs	r3, r3, #5
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d102      	bne.n	8000e30 <HAL_RCC_OscConfig+0x94>
 8000e2a:	4ba8      	ldr	r3, [pc, #672]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	e015      	b.n	8000e5c <HAL_RCC_OscConfig+0xc0>
 8000e30:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e34:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e38:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000e3c:	fa93 f3a3 	rbit	r3, r3
 8000e40:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000e44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e48:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000e4c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000e50:	fa93 f3a3 	rbit	r3, r3
 8000e54:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000e58:	4b9c      	ldr	r3, [pc, #624]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e60:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000e64:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e68:	fa92 f2a2 	rbit	r2, r2
 8000e6c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000e70:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000e74:	fab2 f282 	clz	r2, r2
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	f042 0220 	orr.w	r2, r2, #32
 8000e7e:	b2d2      	uxtb	r2, r2
 8000e80:	f002 021f 	and.w	r2, r2, #31
 8000e84:	2101      	movs	r1, #1
 8000e86:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f000 811f 	beq.w	80010d0 <HAL_RCC_OscConfig+0x334>
 8000e92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f040 8116 	bne.w	80010d0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	f000 bfaf 	b.w	8001e08 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000eba:	d106      	bne.n	8000eca <HAL_RCC_OscConfig+0x12e>
 8000ebc:	4b83      	ldr	r3, [pc, #524]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a82      	ldr	r2, [pc, #520]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000ec2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	e036      	b.n	8000f38 <HAL_RCC_OscConfig+0x19c>
 8000eca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ece:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10c      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x158>
 8000eda:	4b7c      	ldr	r3, [pc, #496]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a7b      	ldr	r2, [pc, #492]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	4b79      	ldr	r3, [pc, #484]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a78      	ldr	r2, [pc, #480]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000eec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ef0:	6013      	str	r3, [r2, #0]
 8000ef2:	e021      	b.n	8000f38 <HAL_RCC_OscConfig+0x19c>
 8000ef4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ef8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f04:	d10c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x184>
 8000f06:	4b71      	ldr	r3, [pc, #452]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a70      	ldr	r2, [pc, #448]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	4b6e      	ldr	r3, [pc, #440]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a6d      	ldr	r2, [pc, #436]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e00b      	b.n	8000f38 <HAL_RCC_OscConfig+0x19c>
 8000f20:	4b6a      	ldr	r3, [pc, #424]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a69      	ldr	r2, [pc, #420]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b67      	ldr	r3, [pc, #412]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a66      	ldr	r2, [pc, #408]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f36:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f38:	4b64      	ldr	r3, [pc, #400]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f3c:	f023 020f 	bic.w	r2, r3, #15
 8000f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	495f      	ldr	r1, [pc, #380]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d059      	beq.n	8001016 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f62:	f7ff fb65 	bl	8000630 <HAL_GetTick>
 8000f66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6a:	e00a      	b.n	8000f82 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f6c:	f7ff fb60 	bl	8000630 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b64      	cmp	r3, #100	@ 0x64
 8000f7a:	d902      	bls.n	8000f82 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	f000 bf43 	b.w	8001e08 <HAL_RCC_OscConfig+0x106c>
 8000f82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f86:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000f8e:	fa93 f3a3 	rbit	r3, r3
 8000f92:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000f96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9a:	fab3 f383 	clz	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	095b      	lsrs	r3, r3, #5
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d102      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x218>
 8000fae:	4b47      	ldr	r3, [pc, #284]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	e015      	b.n	8000fe0 <HAL_RCC_OscConfig+0x244>
 8000fb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fb8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fbc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000fc0:	fa93 f3a3 	rbit	r3, r3
 8000fc4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000fc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fcc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000fd0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000fd4:	fa93 f3a3 	rbit	r3, r3
 8000fd8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8000fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fe0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000fe4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000fe8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000fec:	fa92 f2a2 	rbit	r2, r2
 8000ff0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000ff4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000ff8:	fab2 f282 	clz	r2, r2
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	f042 0220 	orr.w	r2, r2, #32
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	f002 021f 	and.w	r2, r2, #31
 8001008:	2101      	movs	r1, #1
 800100a:	fa01 f202 	lsl.w	r2, r1, r2
 800100e:	4013      	ands	r3, r2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0ab      	beq.n	8000f6c <HAL_RCC_OscConfig+0x1d0>
 8001014:	e05d      	b.n	80010d2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001016:	f7ff fb0b 	bl	8000630 <HAL_GetTick>
 800101a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800101e:	e00a      	b.n	8001036 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fb06 	bl	8000630 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b64      	cmp	r3, #100	@ 0x64
 800102e:	d902      	bls.n	8001036 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	f000 bee9 	b.w	8001e08 <HAL_RCC_OscConfig+0x106c>
 8001036:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800103a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001042:	fa93 f3a3 	rbit	r3, r3
 8001046:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800104a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104e:	fab3 f383 	clz	r3, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	095b      	lsrs	r3, r3, #5
 8001056:	b2db      	uxtb	r3, r3
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b01      	cmp	r3, #1
 8001060:	d102      	bne.n	8001068 <HAL_RCC_OscConfig+0x2cc>
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	e015      	b.n	8001094 <HAL_RCC_OscConfig+0x2f8>
 8001068:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800106c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001070:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001074:	fa93 f3a3 	rbit	r3, r3
 8001078:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800107c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001080:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001084:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001088:	fa93 f3a3 	rbit	r3, r3
 800108c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001090:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <HAL_RCC_OscConfig+0x330>)
 8001092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001094:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001098:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800109c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80010a0:	fa92 f2a2 	rbit	r2, r2
 80010a4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80010a8:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80010ac:	fab2 f282 	clz	r2, r2
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	f042 0220 	orr.w	r2, r2, #32
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	f002 021f 	and.w	r2, r2, #31
 80010bc:	2101      	movs	r1, #1
 80010be:	fa01 f202 	lsl.w	r2, r1, r2
 80010c2:	4013      	ands	r3, r2
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1ab      	bne.n	8001020 <HAL_RCC_OscConfig+0x284>
 80010c8:	e003      	b.n	80010d2 <HAL_RCC_OscConfig+0x336>
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 817d 	beq.w	80013e2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010e8:	4ba6      	ldr	r3, [pc, #664]	@ (8001384 <HAL_RCC_OscConfig+0x5e8>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 030c 	and.w	r3, r3, #12
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010f4:	4ba3      	ldr	r3, [pc, #652]	@ (8001384 <HAL_RCC_OscConfig+0x5e8>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 030c 	and.w	r3, r3, #12
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d172      	bne.n	80011e6 <HAL_RCC_OscConfig+0x44a>
 8001100:	4ba0      	ldr	r3, [pc, #640]	@ (8001384 <HAL_RCC_OscConfig+0x5e8>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d16c      	bne.n	80011e6 <HAL_RCC_OscConfig+0x44a>
 800110c:	2302      	movs	r3, #2
 800110e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001112:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001116:	fa93 f3a3 	rbit	r3, r3
 800111a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800111e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001122:	fab3 f383 	clz	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	095b      	lsrs	r3, r3, #5
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b01      	cmp	r3, #1
 8001134:	d102      	bne.n	800113c <HAL_RCC_OscConfig+0x3a0>
 8001136:	4b93      	ldr	r3, [pc, #588]	@ (8001384 <HAL_RCC_OscConfig+0x5e8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	e013      	b.n	8001164 <HAL_RCC_OscConfig+0x3c8>
 800113c:	2302      	movs	r3, #2
 800113e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001142:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800114e:	2302      	movs	r3, #2
 8001150:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001154:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001158:	fa93 f3a3 	rbit	r3, r3
 800115c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001160:	4b88      	ldr	r3, [pc, #544]	@ (8001384 <HAL_RCC_OscConfig+0x5e8>)
 8001162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001164:	2202      	movs	r2, #2
 8001166:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800116a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800116e:	fa92 f2a2 	rbit	r2, r2
 8001172:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001176:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800117a:	fab2 f282 	clz	r2, r2
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	f042 0220 	orr.w	r2, r2, #32
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	f002 021f 	and.w	r2, r2, #31
 800118a:	2101      	movs	r1, #1
 800118c:	fa01 f202 	lsl.w	r2, r1, r2
 8001190:	4013      	ands	r3, r2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00a      	beq.n	80011ac <HAL_RCC_OscConfig+0x410>
 8001196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800119a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d002      	beq.n	80011ac <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	f000 be2e 	b.w	8001e08 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ac:	4b75      	ldr	r3, [pc, #468]	@ (8001384 <HAL_RCC_OscConfig+0x5e8>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	21f8      	movs	r1, #248	@ 0xf8
 80011c2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80011ca:	fa91 f1a1 	rbit	r1, r1
 80011ce:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80011d2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80011d6:	fab1 f181 	clz	r1, r1
 80011da:	b2c9      	uxtb	r1, r1
 80011dc:	408b      	lsls	r3, r1
 80011de:	4969      	ldr	r1, [pc, #420]	@ (8001384 <HAL_RCC_OscConfig+0x5e8>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e4:	e0fd      	b.n	80013e2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8088 	beq.w	8001308 <HAL_RCC_OscConfig+0x56c>
 80011f8:	2301      	movs	r3, #1
 80011fa:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001202:	fa93 f3a3 	rbit	r3, r3
 8001206:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800120a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800120e:	fab3 f383 	clz	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001218:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	461a      	mov	r2, r3
 8001220:	2301      	movs	r3, #1
 8001222:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fa04 	bl	8000630 <HAL_GetTick>
 8001228:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122c:	e00a      	b.n	8001244 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff f9ff 	bl	8000630 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d902      	bls.n	8001244 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	f000 bde2 	b.w	8001e08 <HAL_RCC_OscConfig+0x106c>
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800124e:	fa93 f3a3 	rbit	r3, r3
 8001252:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001256:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125a:	fab3 f383 	clz	r3, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	095b      	lsrs	r3, r3, #5
 8001262:	b2db      	uxtb	r3, r3
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d102      	bne.n	8001274 <HAL_RCC_OscConfig+0x4d8>
 800126e:	4b45      	ldr	r3, [pc, #276]	@ (8001384 <HAL_RCC_OscConfig+0x5e8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	e013      	b.n	800129c <HAL_RCC_OscConfig+0x500>
 8001274:	2302      	movs	r3, #2
 8001276:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001286:	2302      	movs	r3, #2
 8001288:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800128c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001290:	fa93 f3a3 	rbit	r3, r3
 8001294:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001298:	4b3a      	ldr	r3, [pc, #232]	@ (8001384 <HAL_RCC_OscConfig+0x5e8>)
 800129a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129c:	2202      	movs	r2, #2
 800129e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80012a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80012a6:	fa92 f2a2 	rbit	r2, r2
 80012aa:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80012ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80012b2:	fab2 f282 	clz	r2, r2
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	f042 0220 	orr.w	r2, r2, #32
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	f002 021f 	and.w	r2, r2, #31
 80012c2:	2101      	movs	r1, #1
 80012c4:	fa01 f202 	lsl.w	r2, r1, r2
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0af      	beq.n	800122e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001384 <HAL_RCC_OscConfig+0x5e8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	21f8      	movs	r1, #248	@ 0xf8
 80012e4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80012ec:	fa91 f1a1 	rbit	r1, r1
 80012f0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80012f4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80012f8:	fab1 f181 	clz	r1, r1
 80012fc:	b2c9      	uxtb	r1, r1
 80012fe:	408b      	lsls	r3, r1
 8001300:	4920      	ldr	r1, [pc, #128]	@ (8001384 <HAL_RCC_OscConfig+0x5e8>)
 8001302:	4313      	orrs	r3, r2
 8001304:	600b      	str	r3, [r1, #0]
 8001306:	e06c      	b.n	80013e2 <HAL_RCC_OscConfig+0x646>
 8001308:	2301      	movs	r3, #1
 800130a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001312:	fa93 f3a3 	rbit	r3, r3
 8001316:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800131a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001328:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	461a      	mov	r2, r3
 8001330:	2300      	movs	r3, #0
 8001332:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff f97c 	bl	8000630 <HAL_GetTick>
 8001338:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133c:	e00a      	b.n	8001354 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800133e:	f7ff f977 	bl	8000630 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d902      	bls.n	8001354 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	f000 bd5a 	b.w	8001e08 <HAL_RCC_OscConfig+0x106c>
 8001354:	2302      	movs	r3, #2
 8001356:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800135e:	fa93 f3a3 	rbit	r3, r3
 8001362:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001366:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	fab3 f383 	clz	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	095b      	lsrs	r3, r3, #5
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b01      	cmp	r3, #1
 800137c:	d104      	bne.n	8001388 <HAL_RCC_OscConfig+0x5ec>
 800137e:	4b01      	ldr	r3, [pc, #4]	@ (8001384 <HAL_RCC_OscConfig+0x5e8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	e015      	b.n	80013b0 <HAL_RCC_OscConfig+0x614>
 8001384:	40021000 	.word	0x40021000
 8001388:	2302      	movs	r3, #2
 800138a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001392:	fa93 f3a3 	rbit	r3, r3
 8001396:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80013a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013a4:	fa93 f3a3 	rbit	r3, r3
 80013a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80013ac:	4bc8      	ldr	r3, [pc, #800]	@ (80016d0 <HAL_RCC_OscConfig+0x934>)
 80013ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b0:	2202      	movs	r2, #2
 80013b2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80013b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80013ba:	fa92 f2a2 	rbit	r2, r2
 80013be:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80013c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80013c6:	fab2 f282 	clz	r2, r2
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	f042 0220 	orr.w	r2, r2, #32
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	f002 021f 	and.w	r2, r2, #31
 80013d6:	2101      	movs	r1, #1
 80013d8:	fa01 f202 	lsl.w	r2, r1, r2
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ad      	bne.n	800133e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8110 	beq.w	8001618 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d079      	beq.n	80014fc <HAL_RCC_OscConfig+0x760>
 8001408:	2301      	movs	r3, #1
 800140a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800141a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141e:	fab3 f383 	clz	r3, r3
 8001422:	b2db      	uxtb	r3, r3
 8001424:	461a      	mov	r2, r3
 8001426:	4bab      	ldr	r3, [pc, #684]	@ (80016d4 <HAL_RCC_OscConfig+0x938>)
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	461a      	mov	r2, r3
 800142e:	2301      	movs	r3, #1
 8001430:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff f8fd 	bl	8000630 <HAL_GetTick>
 8001436:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	e00a      	b.n	8001452 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff f8f8 	bl	8000630 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d902      	bls.n	8001452 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	f000 bcdb 	b.w	8001e08 <HAL_RCC_OscConfig+0x106c>
 8001452:	2302      	movs	r3, #2
 8001454:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001458:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800145c:	fa93 f3a3 	rbit	r3, r3
 8001460:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001464:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001468:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800146c:	2202      	movs	r2, #2
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001474:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	fa93 f2a3 	rbit	r2, r3
 800147e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800148c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001490:	2202      	movs	r2, #2
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	fa93 f2a3 	rbit	r2, r3
 80014a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80014aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ac:	4b88      	ldr	r3, [pc, #544]	@ (80016d0 <HAL_RCC_OscConfig+0x934>)
 80014ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014b4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014b8:	2102      	movs	r1, #2
 80014ba:	6019      	str	r1, [r3, #0]
 80014bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	fa93 f1a3 	rbit	r1, r3
 80014ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014d2:	6019      	str	r1, [r3, #0]
  return result;
 80014d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	2101      	movs	r1, #1
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0a0      	beq.n	800143c <HAL_RCC_OscConfig+0x6a0>
 80014fa:	e08d      	b.n	8001618 <HAL_RCC_OscConfig+0x87c>
 80014fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001500:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800150c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	fa93 f2a3 	rbit	r2, r3
 8001516:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800151a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800151e:	601a      	str	r2, [r3, #0]
  return result;
 8001520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001524:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001528:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152a:	fab3 f383 	clz	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	4b68      	ldr	r3, [pc, #416]	@ (80016d4 <HAL_RCC_OscConfig+0x938>)
 8001534:	4413      	add	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	461a      	mov	r2, r3
 800153a:	2300      	movs	r3, #0
 800153c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153e:	f7ff f877 	bl	8000630 <HAL_GetTick>
 8001542:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001546:	e00a      	b.n	800155e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001548:	f7ff f872 	bl	8000630 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d902      	bls.n	800155e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	f000 bc55 	b.w	8001e08 <HAL_RCC_OscConfig+0x106c>
 800155e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001562:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001566:	2202      	movs	r2, #2
 8001568:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	fa93 f2a3 	rbit	r2, r3
 8001578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800157c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001586:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800158a:	2202      	movs	r2, #2
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001592:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	fa93 f2a3 	rbit	r2, r3
 800159c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015ae:	2202      	movs	r2, #2
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	fa93 f2a3 	rbit	r2, r3
 80015c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80015c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ca:	4b41      	ldr	r3, [pc, #260]	@ (80016d0 <HAL_RCC_OscConfig+0x934>)
 80015cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015d6:	2102      	movs	r1, #2
 80015d8:	6019      	str	r1, [r3, #0]
 80015da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015de:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	fa93 f1a3 	rbit	r1, r3
 80015e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015f0:	6019      	str	r1, [r3, #0]
  return result;
 80015f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f003 031f 	and.w	r3, r3, #31
 800160c:	2101      	movs	r1, #1
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d197      	bne.n	8001548 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 81a1 	beq.w	8001970 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162e:	2300      	movs	r3, #0
 8001630:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001634:	4b26      	ldr	r3, [pc, #152]	@ (80016d0 <HAL_RCC_OscConfig+0x934>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d116      	bne.n	800166e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001640:	4b23      	ldr	r3, [pc, #140]	@ (80016d0 <HAL_RCC_OscConfig+0x934>)
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	4a22      	ldr	r2, [pc, #136]	@ (80016d0 <HAL_RCC_OscConfig+0x934>)
 8001646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800164a:	61d3      	str	r3, [r2, #28]
 800164c:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <HAL_RCC_OscConfig+0x934>)
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001654:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001658:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001662:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001666:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001668:	2301      	movs	r3, #1
 800166a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166e:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <HAL_RCC_OscConfig+0x93c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d11a      	bne.n	80016b0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167a:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <HAL_RCC_OscConfig+0x93c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a16      	ldr	r2, [pc, #88]	@ (80016d8 <HAL_RCC_OscConfig+0x93c>)
 8001680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001684:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001686:	f7fe ffd3 	bl	8000630 <HAL_GetTick>
 800168a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	e009      	b.n	80016a4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001690:	f7fe ffce 	bl	8000630 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b64      	cmp	r3, #100	@ 0x64
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e3b1      	b.n	8001e08 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <HAL_RCC_OscConfig+0x93c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0ef      	beq.n	8001690 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d10d      	bne.n	80016dc <HAL_RCC_OscConfig+0x940>
 80016c0:	4b03      	ldr	r3, [pc, #12]	@ (80016d0 <HAL_RCC_OscConfig+0x934>)
 80016c2:	6a1b      	ldr	r3, [r3, #32]
 80016c4:	4a02      	ldr	r2, [pc, #8]	@ (80016d0 <HAL_RCC_OscConfig+0x934>)
 80016c6:	f043 0301 	orr.w	r3, r3, #1
 80016ca:	6213      	str	r3, [r2, #32]
 80016cc:	e03c      	b.n	8001748 <HAL_RCC_OscConfig+0x9ac>
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000
 80016d4:	10908120 	.word	0x10908120
 80016d8:	40007000 	.word	0x40007000
 80016dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10c      	bne.n	8001706 <HAL_RCC_OscConfig+0x96a>
 80016ec:	4bc1      	ldr	r3, [pc, #772]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4ac0      	ldr	r2, [pc, #768]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 80016f2:	f023 0301 	bic.w	r3, r3, #1
 80016f6:	6213      	str	r3, [r2, #32]
 80016f8:	4bbe      	ldr	r3, [pc, #760]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4abd      	ldr	r2, [pc, #756]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 80016fe:	f023 0304 	bic.w	r3, r3, #4
 8001702:	6213      	str	r3, [r2, #32]
 8001704:	e020      	b.n	8001748 <HAL_RCC_OscConfig+0x9ac>
 8001706:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800170a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b05      	cmp	r3, #5
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x994>
 8001716:	4bb7      	ldr	r3, [pc, #732]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4ab6      	ldr	r2, [pc, #728]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6213      	str	r3, [r2, #32]
 8001722:	4bb4      	ldr	r3, [pc, #720]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4ab3      	ldr	r2, [pc, #716]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6213      	str	r3, [r2, #32]
 800172e:	e00b      	b.n	8001748 <HAL_RCC_OscConfig+0x9ac>
 8001730:	4bb0      	ldr	r3, [pc, #704]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4aaf      	ldr	r2, [pc, #700]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	6213      	str	r3, [r2, #32]
 800173c:	4bad      	ldr	r3, [pc, #692]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4aac      	ldr	r2, [pc, #688]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 8001742:	f023 0304 	bic.w	r3, r3, #4
 8001746:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	f000 8081 	beq.w	800185c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175a:	f7fe ff69 	bl	8000630 <HAL_GetTick>
 800175e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001764:	f7fe ff64 	bl	8000630 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001774:	4293      	cmp	r3, r2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e345      	b.n	8001e08 <HAL_RCC_OscConfig+0x106c>
 800177c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001780:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001784:	2202      	movs	r2, #2
 8001786:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	fa93 f2a3 	rbit	r2, r3
 8001796:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800179a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017a4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017a8:	2202      	movs	r2, #2
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017b0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	fa93 f2a3 	rbit	r2, r3
 80017ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017be:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017c2:	601a      	str	r2, [r3, #0]
  return result;
 80017c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017c8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80017cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ce:	fab3 f383 	clz	r3, r3
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	095b      	lsrs	r3, r3, #5
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d102      	bne.n	80017e8 <HAL_RCC_OscConfig+0xa4c>
 80017e2:	4b84      	ldr	r3, [pc, #528]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 80017e4:	6a1b      	ldr	r3, [r3, #32]
 80017e6:	e013      	b.n	8001810 <HAL_RCC_OscConfig+0xa74>
 80017e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ec:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80017f0:	2202      	movs	r2, #2
 80017f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	fa93 f2a3 	rbit	r2, r3
 8001802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001806:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	4b79      	ldr	r3, [pc, #484]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 800180e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001810:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001814:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001818:	2102      	movs	r1, #2
 800181a:	6011      	str	r1, [r2, #0]
 800181c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001820:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	fa92 f1a2 	rbit	r1, r2
 800182a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800182e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001832:	6011      	str	r1, [r2, #0]
  return result;
 8001834:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001838:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	fab2 f282 	clz	r2, r2
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	f002 021f 	and.w	r2, r2, #31
 800184e:	2101      	movs	r1, #1
 8001850:	fa01 f202 	lsl.w	r2, r1, r2
 8001854:	4013      	ands	r3, r2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d084      	beq.n	8001764 <HAL_RCC_OscConfig+0x9c8>
 800185a:	e07f      	b.n	800195c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185c:	f7fe fee8 	bl	8000630 <HAL_GetTick>
 8001860:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001864:	e00b      	b.n	800187e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7fe fee3 	bl	8000630 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e2c4      	b.n	8001e08 <HAL_RCC_OscConfig+0x106c>
 800187e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001882:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001886:	2202      	movs	r2, #2
 8001888:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	fa93 f2a3 	rbit	r2, r3
 8001898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800189c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018aa:	2202      	movs	r2, #2
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	fa93 f2a3 	rbit	r2, r3
 80018bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018c4:	601a      	str	r2, [r3, #0]
  return result;
 80018c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ca:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	f043 0302 	orr.w	r3, r3, #2
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d102      	bne.n	80018ea <HAL_RCC_OscConfig+0xb4e>
 80018e4:	4b43      	ldr	r3, [pc, #268]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	e013      	b.n	8001912 <HAL_RCC_OscConfig+0xb76>
 80018ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ee:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018f2:	2202      	movs	r2, #2
 80018f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	fa93 f2a3 	rbit	r2, r3
 8001904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001908:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	4b39      	ldr	r3, [pc, #228]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 8001910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001912:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001916:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800191a:	2102      	movs	r1, #2
 800191c:	6011      	str	r1, [r2, #0]
 800191e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001922:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	fa92 f1a2 	rbit	r1, r2
 800192c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001930:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001934:	6011      	str	r1, [r2, #0]
  return result;
 8001936:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800193a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	fab2 f282 	clz	r2, r2
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	f002 021f 	and.w	r2, r2, #31
 8001950:	2101      	movs	r1, #1
 8001952:	fa01 f202 	lsl.w	r2, r1, r2
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d184      	bne.n	8001866 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800195c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001964:	4b23      	ldr	r3, [pc, #140]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	4a22      	ldr	r2, [pc, #136]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 800196a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800196e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001970:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001974:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 8242 	beq.w	8001e06 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001982:	4b1c      	ldr	r3, [pc, #112]	@ (80019f4 <HAL_RCC_OscConfig+0xc58>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b08      	cmp	r3, #8
 800198c:	f000 8213 	beq.w	8001db6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001994:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	2b02      	cmp	r3, #2
 800199e:	f040 8162 	bne.w	8001c66 <HAL_RCC_OscConfig+0xeca>
 80019a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80019aa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80019ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	fa93 f2a3 	rbit	r2, r3
 80019be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019c6:	601a      	str	r2, [r3, #0]
  return result;
 80019c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019cc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80019d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019dc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	461a      	mov	r2, r3
 80019e4:	2300      	movs	r3, #0
 80019e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7fe fe22 	bl	8000630 <HAL_GetTick>
 80019ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f0:	e00c      	b.n	8001a0c <HAL_RCC_OscConfig+0xc70>
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f8:	f7fe fe1a 	bl	8000630 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1fd      	b.n	8001e08 <HAL_RCC_OscConfig+0x106c>
 8001a0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a10:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	fa93 f2a3 	rbit	r2, r3
 8001a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a30:	601a      	str	r2, [r3, #0]
  return result;
 8001a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a36:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001a3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d102      	bne.n	8001a56 <HAL_RCC_OscConfig+0xcba>
 8001a50:	4bb0      	ldr	r3, [pc, #704]	@ (8001d14 <HAL_RCC_OscConfig+0xf78>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	e027      	b.n	8001aa6 <HAL_RCC_OscConfig+0xd0a>
 8001a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a68:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	fa93 f2a3 	rbit	r2, r3
 8001a72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a76:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a80:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	fa93 f2a3 	rbit	r2, r3
 8001a98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	4b9c      	ldr	r3, [pc, #624]	@ (8001d14 <HAL_RCC_OscConfig+0xf78>)
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001aaa:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001aae:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ab2:	6011      	str	r1, [r2, #0]
 8001ab4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ab8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	fa92 f1a2 	rbit	r1, r2
 8001ac2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ac6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001aca:	6011      	str	r1, [r2, #0]
  return result;
 8001acc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ad0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	fab2 f282 	clz	r2, r2
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	f042 0220 	orr.w	r2, r2, #32
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	f002 021f 	and.w	r2, r2, #31
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d182      	bne.n	80019f8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af2:	4b88      	ldr	r3, [pc, #544]	@ (8001d14 <HAL_RCC_OscConfig+0xf78>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	430b      	orrs	r3, r1
 8001b14:	497f      	ldr	r1, [pc, #508]	@ (8001d14 <HAL_RCC_OscConfig+0xf78>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	604b      	str	r3, [r1, #4]
 8001b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b22:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fa93 f2a3 	rbit	r2, r3
 8001b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b3e:	601a      	str	r2, [r3, #0]
  return result;
 8001b40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b44:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001b48:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4a:	fab3 f383 	clz	r3, r3
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b54:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7fe fd66 	bl	8000630 <HAL_GetTick>
 8001b64:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b68:	e009      	b.n	8001b7e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7fe fd61 	bl	8000630 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e144      	b.n	8001e08 <HAL_RCC_OscConfig+0x106c>
 8001b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b82:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b90:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	fa93 f2a3 	rbit	r2, r3
 8001b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b9e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001ba2:	601a      	str	r2, [r3, #0]
  return result;
 8001ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001bac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	095b      	lsrs	r3, r3, #5
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d102      	bne.n	8001bc8 <HAL_RCC_OscConfig+0xe2c>
 8001bc2:	4b54      	ldr	r3, [pc, #336]	@ (8001d14 <HAL_RCC_OscConfig+0xf78>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	e027      	b.n	8001c18 <HAL_RCC_OscConfig+0xe7c>
 8001bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bcc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001bd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bda:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	fa93 f2a3 	rbit	r2, r3
 8001be4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001bf6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c00:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	fa93 f2a3 	rbit	r2, r3
 8001c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	4b3f      	ldr	r3, [pc, #252]	@ (8001d14 <HAL_RCC_OscConfig+0xf78>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c1c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001c20:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001c24:	6011      	str	r1, [r2, #0]
 8001c26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c2a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	fa92 f1a2 	rbit	r1, r2
 8001c34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c38:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c3c:	6011      	str	r1, [r2, #0]
  return result;
 8001c3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c42:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	fab2 f282 	clz	r2, r2
 8001c4c:	b2d2      	uxtb	r2, r2
 8001c4e:	f042 0220 	orr.w	r2, r2, #32
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f002 021f 	and.w	r2, r2, #31
 8001c58:	2101      	movs	r1, #1
 8001c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d082      	beq.n	8001b6a <HAL_RCC_OscConfig+0xdce>
 8001c64:	e0cf      	b.n	8001e06 <HAL_RCC_OscConfig+0x106a>
 8001c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c6e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c78:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	fa93 f2a3 	rbit	r2, r3
 8001c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c86:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c8a:	601a      	str	r2, [r3, #0]
  return result;
 8001c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c90:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001c94:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ca0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	2300      	movs	r3, #0
 8001caa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7fe fcc0 	bl	8000630 <HAL_GetTick>
 8001cb0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb4:	e009      	b.n	8001cca <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7fe fcbb 	bl	8000630 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e09e      	b.n	8001e08 <HAL_RCC_OscConfig+0x106c>
 8001cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cce:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001cd2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cdc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	fa93 f2a3 	rbit	r2, r3
 8001ce6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cea:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001cee:	601a      	str	r2, [r3, #0]
  return result;
 8001cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001cf8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	095b      	lsrs	r3, r3, #5
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d104      	bne.n	8001d18 <HAL_RCC_OscConfig+0xf7c>
 8001d0e:	4b01      	ldr	r3, [pc, #4]	@ (8001d14 <HAL_RCC_OscConfig+0xf78>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	e029      	b.n	8001d68 <HAL_RCC_OscConfig+0xfcc>
 8001d14:	40021000 	.word	0x40021000
 8001d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d2a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	fa93 f2a3 	rbit	r2, r3
 8001d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d38:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d42:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d46:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d50:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	fa93 f2a3 	rbit	r2, r3
 8001d5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	4b2b      	ldr	r3, [pc, #172]	@ (8001e14 <HAL_RCC_OscConfig+0x1078>)
 8001d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d6c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d70:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d74:	6011      	str	r1, [r2, #0]
 8001d76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d7a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	fa92 f1a2 	rbit	r1, r2
 8001d84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d88:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d8c:	6011      	str	r1, [r2, #0]
  return result;
 8001d8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d92:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	fab2 f282 	clz	r2, r2
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	f042 0220 	orr.w	r2, r2, #32
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f002 021f 	and.w	r2, r2, #31
 8001da8:	2101      	movs	r1, #1
 8001daa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d180      	bne.n	8001cb6 <HAL_RCC_OscConfig+0xf1a>
 8001db4:	e027      	b.n	8001e06 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d101      	bne.n	8001dca <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e01e      	b.n	8001e08 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dca:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <HAL_RCC_OscConfig+0x1078>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001dd6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d10b      	bne.n	8001e02 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001dea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001dee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d001      	beq.n	8001e06 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000

08001e18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b09e      	sub	sp, #120	@ 0x78
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e162      	b.n	80020f6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e30:	4b90      	ldr	r3, [pc, #576]	@ (8002074 <HAL_RCC_ClockConfig+0x25c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d910      	bls.n	8001e60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b8d      	ldr	r3, [pc, #564]	@ (8002074 <HAL_RCC_ClockConfig+0x25c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 0207 	bic.w	r2, r3, #7
 8001e46:	498b      	ldr	r1, [pc, #556]	@ (8002074 <HAL_RCC_ClockConfig+0x25c>)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b89      	ldr	r3, [pc, #548]	@ (8002074 <HAL_RCC_ClockConfig+0x25c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e14a      	b.n	80020f6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d008      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e6c:	4b82      	ldr	r3, [pc, #520]	@ (8002078 <HAL_RCC_ClockConfig+0x260>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	497f      	ldr	r1, [pc, #508]	@ (8002078 <HAL_RCC_ClockConfig+0x260>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80dc 	beq.w	8002044 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d13c      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xf6>
 8001e94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e98:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001ea2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea4:	fab3 f383 	clz	r3, r3
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d102      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xa6>
 8001eb8:	4b6f      	ldr	r3, [pc, #444]	@ (8002078 <HAL_RCC_ClockConfig+0x260>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	e00f      	b.n	8001ede <HAL_RCC_ClockConfig+0xc6>
 8001ebe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ec2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ecc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ed0:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ed2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ed4:	fa93 f3a3 	rbit	r3, r3
 8001ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001eda:	4b67      	ldr	r3, [pc, #412]	@ (8002078 <HAL_RCC_ClockConfig+0x260>)
 8001edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ede:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ee2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001ee4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ee6:	fa92 f2a2 	rbit	r2, r2
 8001eea:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001eec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001eee:	fab2 f282 	clz	r2, r2
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	f042 0220 	orr.w	r2, r2, #32
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	f002 021f 	and.w	r2, r2, #31
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f202 	lsl.w	r2, r1, r2
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d17b      	bne.n	8002002 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0f3      	b.n	80020f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d13c      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x178>
 8001f16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f1a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f26:	fab3 f383 	clz	r3, r3
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d102      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x128>
 8001f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8002078 <HAL_RCC_ClockConfig+0x260>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	e00f      	b.n	8001f60 <HAL_RCC_ClockConfig+0x148>
 8001f40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f48:	fa93 f3a3 	rbit	r3, r3
 8001f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f52:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f5c:	4b46      	ldr	r3, [pc, #280]	@ (8002078 <HAL_RCC_ClockConfig+0x260>)
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f64:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001f66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001f68:	fa92 f2a2 	rbit	r2, r2
 8001f6c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001f6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001f70:	fab2 f282 	clz	r2, r2
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	f042 0220 	orr.w	r2, r2, #32
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	f002 021f 	and.w	r2, r2, #31
 8001f80:	2101      	movs	r1, #1
 8001f82:	fa01 f202 	lsl.w	r2, r1, r2
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d13a      	bne.n	8002002 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0b2      	b.n	80020f6 <HAL_RCC_ClockConfig+0x2de>
 8001f90:	2302      	movs	r3, #2
 8001f92:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	095b      	lsrs	r3, r3, #5
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d102      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x1a0>
 8001fb2:	4b31      	ldr	r3, [pc, #196]	@ (8002078 <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	e00d      	b.n	8001fd4 <HAL_RCC_ClockConfig+0x1bc>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	623b      	str	r3, [r7, #32]
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	4b29      	ldr	r3, [pc, #164]	@ (8002078 <HAL_RCC_ClockConfig+0x260>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	61ba      	str	r2, [r7, #24]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	fa92 f2a2 	rbit	r2, r2
 8001fde:	617a      	str	r2, [r7, #20]
  return result;
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	fab2 f282 	clz	r2, r2
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	f042 0220 	orr.w	r2, r2, #32
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	f002 021f 	and.w	r2, r2, #31
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e079      	b.n	80020f6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002002:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <HAL_RCC_ClockConfig+0x260>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f023 0203 	bic.w	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	491a      	ldr	r1, [pc, #104]	@ (8002078 <HAL_RCC_ClockConfig+0x260>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002014:	f7fe fb0c 	bl	8000630 <HAL_GetTick>
 8002018:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	e00a      	b.n	8002032 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201c:	f7fe fb08 	bl	8000630 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e061      	b.n	80020f6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_RCC_ClockConfig+0x260>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 020c 	and.w	r2, r3, #12
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	429a      	cmp	r2, r3
 8002042:	d1eb      	bne.n	800201c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002044:	4b0b      	ldr	r3, [pc, #44]	@ (8002074 <HAL_RCC_ClockConfig+0x25c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d214      	bcs.n	800207c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <HAL_RCC_ClockConfig+0x25c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0207 	bic.w	r2, r3, #7
 800205a:	4906      	ldr	r1, [pc, #24]	@ (8002074 <HAL_RCC_ClockConfig+0x25c>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <HAL_RCC_ClockConfig+0x25c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d005      	beq.n	800207c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e040      	b.n	80020f6 <HAL_RCC_ClockConfig+0x2de>
 8002074:	40022000 	.word	0x40022000
 8002078:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d008      	beq.n	800209a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002088:	4b1d      	ldr	r3, [pc, #116]	@ (8002100 <HAL_RCC_ClockConfig+0x2e8>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	491a      	ldr	r1, [pc, #104]	@ (8002100 <HAL_RCC_ClockConfig+0x2e8>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d009      	beq.n	80020ba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020a6:	4b16      	ldr	r3, [pc, #88]	@ (8002100 <HAL_RCC_ClockConfig+0x2e8>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4912      	ldr	r1, [pc, #72]	@ (8002100 <HAL_RCC_ClockConfig+0x2e8>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020ba:	f000 f829 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 80020be:	4601      	mov	r1, r0
 80020c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002100 <HAL_RCC_ClockConfig+0x2e8>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020c8:	22f0      	movs	r2, #240	@ 0xf0
 80020ca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	fa92 f2a2 	rbit	r2, r2
 80020d2:	60fa      	str	r2, [r7, #12]
  return result;
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	fab2 f282 	clz	r2, r2
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	40d3      	lsrs	r3, r2
 80020de:	4a09      	ldr	r2, [pc, #36]	@ (8002104 <HAL_RCC_ClockConfig+0x2ec>)
 80020e0:	5cd3      	ldrb	r3, [r2, r3]
 80020e2:	fa21 f303 	lsr.w	r3, r1, r3
 80020e6:	4a08      	ldr	r2, [pc, #32]	@ (8002108 <HAL_RCC_ClockConfig+0x2f0>)
 80020e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020ea:	4b08      	ldr	r3, [pc, #32]	@ (800210c <HAL_RCC_ClockConfig+0x2f4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fa5a 	bl	80005a8 <HAL_InitTick>
  
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3778      	adds	r7, #120	@ 0x78
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	08002540 	.word	0x08002540
 8002108:	20000000 	.word	0x20000000
 800210c:	20000004 	.word	0x20000004

08002110 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800212a:	4b1e      	ldr	r3, [pc, #120]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b04      	cmp	r3, #4
 8002138:	d002      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x30>
 800213a:	2b08      	cmp	r3, #8
 800213c:	d003      	beq.n	8002146 <HAL_RCC_GetSysClockFreq+0x36>
 800213e:	e026      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002140:	4b19      	ldr	r3, [pc, #100]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002142:	613b      	str	r3, [r7, #16]
      break;
 8002144:	e026      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	0c9b      	lsrs	r3, r3, #18
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	4a17      	ldr	r2, [pc, #92]	@ (80021ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8002150:	5cd3      	ldrb	r3, [r2, r3]
 8002152:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002154:	4b13      	ldr	r3, [pc, #76]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	4a14      	ldr	r2, [pc, #80]	@ (80021b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800215e:	5cd3      	ldrb	r3, [r2, r3]
 8002160:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800216c:	4a0e      	ldr	r2, [pc, #56]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0x98>)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	fbb2 f2f3 	udiv	r2, r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	e004      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a0c      	ldr	r2, [pc, #48]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
      break;
 800218c:	e002      	b.n	8002194 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800218e:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002190:	613b      	str	r3, [r7, #16]
      break;
 8002192:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002194:	693b      	ldr	r3, [r7, #16]
}
 8002196:	4618      	mov	r0, r3
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	007a1200 	.word	0x007a1200
 80021ac:	08002550 	.word	0x08002550
 80021b0:	08002560 	.word	0x08002560
 80021b4:	003d0900 	.word	0x003d0900

080021b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b092      	sub	sp, #72	@ 0x48
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80d4 	beq.w	8002384 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021dc:	4b4e      	ldr	r3, [pc, #312]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10e      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f2:	61d3      	str	r3, [r2, #28]
 80021f4:	4b48      	ldr	r3, [pc, #288]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002200:	2301      	movs	r3, #1
 8002202:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b45      	ldr	r3, [pc, #276]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d118      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002212:	4b42      	ldr	r3, [pc, #264]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a41      	ldr	r2, [pc, #260]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221e:	f7fe fa07 	bl	8000630 <HAL_GetTick>
 8002222:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	e008      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002226:	f7fe fa03 	bl	8000630 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b64      	cmp	r3, #100	@ 0x64
 8002232:	d901      	bls.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e169      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	4b38      	ldr	r3, [pc, #224]	@ (800231c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002244:	4b34      	ldr	r3, [pc, #208]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800224c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800224e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 8084 	beq.w	800235e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800225e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002260:	429a      	cmp	r2, r3
 8002262:	d07c      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002264:	4b2c      	ldr	r3, [pc, #176]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800226c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800226e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002272:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002276:	fa93 f3a3 	rbit	r3, r3
 800227a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800227c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	4b26      	ldr	r3, [pc, #152]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002288:	4413      	add	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	461a      	mov	r2, r3
 800228e:	2301      	movs	r3, #1
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002296:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800229a:	fa93 f3a3 	rbit	r3, r3
 800229e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80022a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	461a      	mov	r2, r3
 80022b2:	2300      	movs	r3, #0
 80022b4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022b6:	4a18      	ldr	r2, [pc, #96]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d04b      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7fe f9b3 	bl	8000630 <HAL_GetTick>
 80022ca:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022cc:	e00a      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe f9af 	bl	8000630 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d901      	bls.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e113      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80022e4:	2302      	movs	r3, #2
 80022e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80022f0:	2302      	movs	r3, #2
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	61fb      	str	r3, [r7, #28]
  return result;
 80022fc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f043 0302 	orr.w	r3, r3, #2
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d108      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002312:	4b01      	ldr	r3, [pc, #4]	@ (8002318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	e00d      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002318:	40021000 	.word	0x40021000
 800231c:	40007000 	.word	0x40007000
 8002320:	10908100 	.word	0x10908100
 8002324:	2302      	movs	r3, #2
 8002326:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa93 f3a3 	rbit	r3, r3
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	4b78      	ldr	r3, [pc, #480]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	2202      	movs	r2, #2
 8002336:	613a      	str	r2, [r7, #16]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	fa92 f2a2 	rbit	r2, r2
 800233e:	60fa      	str	r2, [r7, #12]
  return result;
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	fab2 f282 	clz	r2, r2
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	f002 021f 	and.w	r2, r2, #31
 8002352:	2101      	movs	r1, #1
 8002354:	fa01 f202 	lsl.w	r2, r1, r2
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0b7      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800235e:	4b6d      	ldr	r3, [pc, #436]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	496a      	ldr	r1, [pc, #424]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800236c:	4313      	orrs	r3, r2
 800236e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002370:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002374:	2b01      	cmp	r3, #1
 8002376:	d105      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002378:	4b66      	ldr	r3, [pc, #408]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	4a65      	ldr	r2, [pc, #404]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800237e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002382:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002390:	4b60      	ldr	r3, [pc, #384]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002394:	f023 0203 	bic.w	r2, r3, #3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	495d      	ldr	r1, [pc, #372]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023ae:	4b59      	ldr	r3, [pc, #356]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4956      	ldr	r1, [pc, #344]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023cc:	4b51      	ldr	r3, [pc, #324]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	494e      	ldr	r1, [pc, #312]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	f023 0210 	bic.w	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	4947      	ldr	r1, [pc, #284]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002408:	4b42      	ldr	r3, [pc, #264]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002414:	493f      	ldr	r1, [pc, #252]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002426:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	f023 0220 	bic.w	r2, r3, #32
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4938      	ldr	r1, [pc, #224]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002444:	4b33      	ldr	r3, [pc, #204]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002448:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	4930      	ldr	r1, [pc, #192]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002452:	4313      	orrs	r3, r2
 8002454:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002462:	4b2c      	ldr	r3, [pc, #176]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	4929      	ldr	r1, [pc, #164]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002470:	4313      	orrs	r3, r2
 8002472:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002480:	4b24      	ldr	r3, [pc, #144]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248c:	4921      	ldr	r1, [pc, #132]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249a:	2b00      	cmp	r3, #0
 800249c:	d008      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800249e:	4b1d      	ldr	r3, [pc, #116]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024aa:	491a      	ldr	r1, [pc, #104]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80024bc:	4b15      	ldr	r3, [pc, #84]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c0:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024c8:	4912      	ldr	r1, [pc, #72]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d008      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80024da:	4b0e      	ldr	r3, [pc, #56]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	490b      	ldr	r1, [pc, #44]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002504:	4903      	ldr	r1, [pc, #12]	@ (8002514 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002506:	4313      	orrs	r3, r2
 8002508:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3748      	adds	r7, #72	@ 0x48
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000

08002518 <memset>:
 8002518:	4402      	add	r2, r0
 800251a:	4603      	mov	r3, r0
 800251c:	4293      	cmp	r3, r2
 800251e:	d100      	bne.n	8002522 <memset+0xa>
 8002520:	4770      	bx	lr
 8002522:	f803 1b01 	strb.w	r1, [r3], #1
 8002526:	e7f9      	b.n	800251c <memset+0x4>

08002528 <_init>:
 8002528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252a:	bf00      	nop
 800252c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252e:	bc08      	pop	{r3}
 8002530:	469e      	mov	lr, r3
 8002532:	4770      	bx	lr

08002534 <_fini>:
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	bf00      	nop
 8002538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253a:	bc08      	pop	{r3}
 800253c:	469e      	mov	lr, r3
 800253e:	4770      	bx	lr
